{"mappings":"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","sources":["src/index.js"],"sourcesContent":["// Function for creating the Shader\nfunction createShader(gl, type, source) {\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (success) {\n    return shader;\n  }\n\n  console.log(gl.getShaderInfoLog(shader));\n  gl.deleteShader(shader);\n}\n\n// This program links the two shaders that we have created.\nfunction createProgram(gl, vertexShader, fragmentShader) {\n  var program = gl.createProgram();\n  gl.attachShader(program, vertexShader);\n  gl.attachShader(program, fragmentShader);\n  gl.linkProgram(program);\n  var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n  if (success) {\n    return program;\n  }\n\n  console.log(gl.getProgramInfoLog(program));\n  gl.deleteProgram(program);\n}\n\n// Main function of our program\nfunction main() {\n  const canvas = document.getElementById(\"game-surface\");\n  const gl = canvas.getContext(\"webgl\");\n\n  if (!gl) {\n    alert(\"WebGL not supported\");\n  }\n\n  // Get the strings for our GLSL shaders\n  var vertexShaderSource = document.querySelector(\"#vertex-shader-2d\").text;\n  var fragmentShaderSource = document.querySelector(\"#fragment-shader-2d\").text;\n\n  // create GLSL shaders, upload the GLSL source, compile the shaders\n  var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n  var fragmentShader = createShader(\n    gl,\n    gl.FRAGMENT_SHADER,\n    fragmentShaderSource\n  );\n\n  // Link the two shaders into a program\n  var program = createProgram(gl, vertexShader, fragmentShader);\n\n  // THE FOLLOWING CODE IS TO FIGURE OUT WHAT DATA THAT WE NEED TO SEND\n  // AND HOW.\n  // Create a buffer and put three 2d clip space points in it\n  var positionBuffer = gl.createBuffer();\n\n  // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\n  // Specify the position data and then send it to the GPU\n  var positions = [\n    // X   Y      R  G  B\n    -0.5, 0.5, 1.0, 1.0, 0.0, -0.5, -0.5, 0.7, 0.0, 1.0, 0.5, -0.5, 0.1, 1.0,\n    0.6, 0.5, -0.5, 0.1, 1.0, 0.6, -0.5, 0.5, 1.0, 1.0, 0.0, 0.5, 0.5, 1.0, 0.7,\n    0.0,\n  ];\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);\n\n  // ***** code above this line is initialization code. *****\n  // ***** code below this line is rendering code. *****\n\n  // Sets the background color for the canvas.\n  gl.clearColor(0.75, 0.85, 0.8, 1.0);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n  // Tell WebGL how to convert from clip space to pixels\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n\n  // look up where the vertex data needs to go.\n  var positionAttributeLocation = gl.getAttribLocation(program, \"a_position\");\n  var colorAttributeLocation = gl.getAttribLocation(program, \"vertColor\");\n\n  // Tell the attribute how to get data out of positionBuffer (ARRAY_BUFFER)\n  var size = 2; // 2 components per iteration\n  var type = gl.FLOAT; // the data is 32bit floats\n  var normalize = false; // don't normalize the data\n  var stride = 5 * Float32Array.BYTES_PER_ELEMENT; // 0 = move forward size * sizeof(type) each iteration to get the next position\n  var offset = 0; // start at the beginning of the buffer\n  gl.vertexAttribPointer(\n    positionAttributeLocation,\n    size,\n    type,\n    normalize,\n    stride,\n    offset\n  );\n\n  var csize = 3;\n  var ctype = gl.FLOAT;\n  var cnormalize = false;\n  var cstride = 5 * Float32Array.BYTES_PER_ELEMENT;\n  var coffset = 2 * Float32Array.BYTES_PER_ELEMENT;\n  gl.vertexAttribPointer(\n    colorAttributeLocation,\n    csize,\n    ctype,\n    cnormalize,\n    cstride,\n    coffset\n  );\n\n  // Enables the attribute for use\n  gl.enableVertexAttribArray(positionAttributeLocation);\n  gl.enableVertexAttribArray(colorAttributeLocation);\n\n  //\n  // Main Render Loop\n  //\n  // Tell it to use our program (pair of shaders)\n  gl.useProgram(program);\n\n  var primitiveType = gl.TRIANGLES;\n  var offset = 0; // How many of the vertex attributes to skip\n  var count = 6; // How many of the vertex attributes to use\n  gl.drawArrays(primitiveType, offset, count);\n}\n\nmain();\n"],"names":[],"version":3,"file":"index.579125c3.js.map","sourceRoot":"/__parcel_source_root/"}